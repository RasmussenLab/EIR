name: Release

on:
  push:
    tags:
      - '*.*.*'

jobs:

  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, macos-10.15]
        python-version: [3.8, 3.9]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }} on ${{ matrix.os }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Run tests with Python ${{ matrix.python-version }} on ${{ matrix.os }}
        run: |
          pip install tox==3.20.1
          pip install poetry==1.1.6
          tox -e py

  createrelease:
    name: Create Release
    needs: test
    runs-on: ubuntu-20.04
    outputs:
      versionoutput: ${{ steps.getversiontag.outputs.VERSION }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: true

      - name: Output Release URL File
        run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt

      - name: Save Release URL File for publish
        uses: actions/upload-artifact@v1
        with:
          name: release_url
          path: release_url.txt

      - name: Get the tag version
        id: getversiontag
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}


  build:
    name: Build packages
    needs: createrelease
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:

          - os: ubuntu-20.04
            TARGET: ubuntu
            CMD_BUILD: |
              poetry run pyinstaller --onefile config/build.spec
              ./dist/eir --version
              zip -j ./dist/eir-${{ needs.createrelease.outputs.versionoutput }}_ubuntu-20.zip ./dist/eir
            OUT_FILE_NAME: eir-${{ needs.createrelease.outputs.versionoutput }}_ubuntu-20.zip
            ASSET_MIME: application/zip

          - os: macos-10.15
            TARGET: macos
            CMD_BUILD: |
              poetry run pyinstaller --onefile config/build.spec
              ./dist/eir --version
              zip -j ./dist/eir-${{ needs.createrelease.outputs.versionoutput }}_macos.zip ./dist/eir
            OUT_FILE_NAME: eir-${{ needs.createrelease.outputs.versionoutput }}_macos.zip
            ASSET_MIME: application/zip

          - os: windows-2019
            TARGET: windows
            CMD_BUILD: |
              poetry run pyinstaller --onefile config/build.spec
              Compress-Archive ./dist/eir.exe ./dist/eir-${{ needs.createrelease.outputs.versionoutput }}_windows.zip
            OUT_FILE_NAME: eir-${{ needs.createrelease.outputs.versionoutput }}_windows.zip
            ASSET_MIME: application/vnd.microsoft.portable-executable

    steps:
      - name: Checkout repository
        uses: actions/checkout@v1

      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade setuptools
          pip install poetry==1.1.6
          poetry install

      - name: Build with pyinstaller for ${{matrix.TARGET}}
        run: ${{matrix.CMD_BUILD}}

      - name: Load Release URL File from release job
        uses: actions/download-artifact@v1
        with:
          name: release_url

      - name: Get Release File Name & Upload URL
        id: get_release_info
        shell: bash
        run: |
          value=`cat release_url/release_url.txt`
          echo ::set-output name=upload_url::$value

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./dist/${{ matrix.OUT_FILE_NAME}}
          asset_name: ${{ matrix.OUT_FILE_NAME}}
          asset_content_type: ${{ matrix.ASSET_MIME}}

  # Currently we are repeating a lot of code from the steps above, but afaik GH actions
  # does currently not have a strong support for composable actions, and mixing
  # matrix configurations with / without containers seems to produce errors
  # See: https://github.community/t/run-matrix-job-on-macos-and-on-ubuntu-in-container/16359/8
  # and https://github.com/actions/runner/issues/646
  build-containers:
    name: Build packages with containers
    needs: createrelease
    runs-on: ${{ matrix.os }}
    container:
      image: ${{ matrix.container }}
    strategy:
      matrix:
        include:

          - name: CentOS 8
            os: ubuntu-20.04
            container: centos:8
            TARGET: CentOS 8
            CMD_BUILD: |
              poetry run pyinstaller --onefile config/build.spec
              ./dist/eir --version
              zip -j ./dist/eir-${{ needs.createrelease.outputs.versionoutput }}_CentOS-8.zip ./dist/eir
            OUT_FILE_NAME: eir-${{ needs.createrelease.outputs.versionoutput }}_CentOS-8.zip
            ASSET_MIME: application/zip

          - name: CentOS 7
            os: ubuntu-20.04
            container: centos:7
            TARGET: CentOS 7
            CMD_BUILD: |
              poetry run pyinstaller --onefile config/build.spec
              ./dist/eir --version
              zip -j ./dist/eir-${{ needs.createrelease.outputs.versionoutput }}_CentOS-7.zip ./dist/eir
            OUT_FILE_NAME: eir-${{ needs.createrelease.outputs.versionoutput }}_CentOS-7.zip
            ASSET_MIME: application/zip

    steps:
      - name: Set up Node
        run: |
              yum update -y
              curl -sL https://rpm.nodesource.com/setup_14.x | bash -
              yum install -y nodejs

      - name: Checkout repository
        uses: actions/checkout@v1

      - name: Set up Python 3.8
        run: yum install -y python3.8 python38-devel

      - name: Set up system dependencies
        run: yum install -y gcc gcc-c++ zip unzip

      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip install --upgrade setuptools
          pip install poetry==1.1.6
          poetry env use 3.8
          poetry install

      - name: Build with pyinstaller for ${{matrix.TARGET}}
        run: ${{matrix.CMD_BUILD}}

      - name: Load Release URL File from release job
        uses: actions/download-artifact@v1
        with:
          name: release_url

      - name: Get Release File Name & Upload URL
        id: get_release_info
        shell: bash
        run: |
          value=`cat release_url/release_url.txt`
          echo ::set-output name=upload_url::$value

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./dist/${{ matrix.OUT_FILE_NAME}}
          asset_name: ${{ matrix.OUT_FILE_NAME}}
          asset_content_type: ${{ matrix.ASSET_MIME}}

  upload:
    name: Upload to PyPI
    needs: [build, build-containers]
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.8'
          architecture: x64
      - run: pip install poetry==1.1.6
      - run: poetry build
      - run: poetry publish --username=__token__ --password=${{ secrets.PYPI_TOKEN }}
