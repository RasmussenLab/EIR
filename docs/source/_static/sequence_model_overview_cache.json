{"yoso": "## Overview\n\nThe YOSO model was proposed in [You Only Sample (Almost) Once: Linear Cost Self-Attention Via Bernoulli Sampling](https://arxiv.org/abs/2111.09714)  \nby Zhanpeng Zeng, Yunyang Xiong, Sathya N. Ravi, Shailesh Acharya, Glenn Fung, Vikas Singh. YOSO approximates standard softmax self-attention\nvia a Bernoulli sampling scheme based on Locality Sensitive Hashing (LSH). In principle, all the Bernoulli random variables can be sampled with\na single hash. \n\nThe abstract from the paper is the following:\n\n*Transformer-based models are widely used in natural language processing (NLP). Central to the transformer model is \nthe self-attention mechanism, which captures the interactions of token pairs in the input sequences and depends quadratically \non the sequence length. Training such models on longer sequences is expensive. In this paper, we show that a Bernoulli sampling \nattention mechanism based on Locality Sensitive Hashing (LSH), decreases the quadratic complexity of such models to linear. \nWe bypass the quadratic cost by considering self-attention as a sum of individual tokens associated with Bernoulli random \nvariables that can, in principle, be sampled at once by a single hash (although in practice, this number may be a small constant). \nThis leads to an efficient sampling scheme to estimate self-attention which relies on specific modifications of \nLSH (to enable deployment on GPU architectures). We evaluate our algorithm on the GLUE benchmark with standard 512 sequence \nlength where we see favorable performance relative to a standard pretrained Transformer. On the Long Range Arena (LRA) benchmark, \nfor evaluating performance on long sequences, our method achieves results consistent with softmax self-attention but with sizable \nspeed-ups and memory savings and often outperforms other efficient self-attention methods. Our code is available at this https URL*\n\nTips:\n\n- The YOSO attention algorithm is implemented through custom CUDA kernels, functions written in CUDA C++ that can be executed multiple times\nin parallel on a GPU.\n- The kernels provide a `fast_hash` function, which approximates the random projections of the queries and keys using the Fast Hadamard Transform. Using these\nhash codes, the `lsh_cumulation` function approximates self-attention via LSH-based Bernoulli sampling.\n- To use the custom kernels, the user should set `config.use_expectation = False`. To ensure that the kernels are compiled successfully, \nthe user must install the correct version of PyTorch and cudatoolkit. By default, `config.use_expectation = True`, which uses YOSO-E and \ndoes not require compiling CUDA kernels.\n\n<img src=\"https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/yoso_architecture.jpg\"\nalt=\"drawing\" width=\"600\"/> \n\n<small> YOSO Attention Algorithm. Taken from the <a href=\"https://arxiv.org/abs/2111.09714\">original paper</a>.</small>\n\nThis model was contributed by [novice03](https://huggingface.co/novice03). The original code can be found [here](https://github.com/mlpen/YOSO).\n\n"}